I actually don't wanna send push notifications manually but instead this should happen automatically
whenever a new chat message was sent and received.

Whenever a new document is added to this chat collection. I wanna send such a push notification to all users.
to add this kind of automation
you need some code on your backend,
not some code in your Flutter app, but instead some code
on your backend, on your remote backend, which can send
out that push notification to all those devices.



If you built your own custom backend
you did that by writing code anyway
so then you could add more code to it to also
use a backend Firebase Sdk to send such a message.



There under "Build", you have this functions area,
which in the end allows you to add code to your backend
that can be triggered and executed upon the occurrence
of certain predefined events.



Now with that setup, we can use this functions feature.
We can get started with that.
And for this, we'll actually need to install this tool here
as a first step.

INSTALL- npm install -g firebase-tools


which in the end is a JavaScript runtime
which we don't need for Flutter development in general
but which we will need for writing this function code
and most importantly
for installing that other tool I just showed you.


And this now installs another Firebase tool
not a tool you need in general for building Flutter apps
with Firebase but a tool we will need
for getting started with these cloud functions
for adding this backend code to Firebase.


you should go through these two steps which are presente
to you here by running Firebase init
in your terminal, in your Flutter project here.
And then here you have to choose which features
you want to use.


And even though we are using Firestore here
we're using it through the Flutter Firebase SDK already.
So here you actually only need to choose functions
by navigating there with the arrow keys
and then hitting space to select it and  then hit enter and then choose it.


"Use an existing project" to link your existing project
to this Firebase function we're about to add
and select that Firebase project you created before.
And this will now set up this project
for adding this functions code.


And once we wrote a function, we can then
run Firebase Deploy to upload that function code to Firebase.


we'll do that later
once we did write that function code.
Now here is part of the setup process.
We're also asked whether we wanna write this function
with JavaScript or type script.


So here we'll just use JavaScript.
We don't need ESLint.
So here I'll type N for no, and we can type Y for yes here
to install any extra dependencies
that are needed for this function code.


Now once this setup process is finished here,
you should have a new functions folder
in your Flutter project.
And you got a couple of files in there.
And it's the index.js file that matters for us here.
This in the end is the file where you will put
your JavaScript code, so not dart code,
JavaScript code that will be uploaded
to Firebase to run there as a function.
So that's the backend code we can now add
to our Firebase project.

And if you would want to write your own functions
you would indeed need to dive
into the official Firebase documentation to learn all
about this functions feature.
And you would need to learn JavaScript because
Firebase cloud functions are written with JavaScript.


which should be used to replace your index.js file width.
And this function code I created for you
in the sets up a function that listens
to a new Firestore document being created.

index.js file:
    const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();

// Cloud Firestore triggers ref: https://firebase.google.com/docs/functions/firestore-events
exports.myFunction = functions.firestore
  .document("chat/{messageId}")
  .onCreate((snapshot, context) => {
    // Return this function's promise, so this ensures the firebase function
    // will keep running, until the notification is scheduled.
    return admin.messaging().sendToTopic("chat", {
      // Sending a notification message.
      notification: {
        title: snapshot.data()["username"],
        body: snapshot.data()["text"],
        clickAction: "FLUTTER_NOTIFICATION_CLICK",
      },
    });
  });



 make sure that whenever a new document is created
on Firestore, this code here executes.
And then we get access
to the document snapshot that was created
so to the data that was created in the end.
And we then use the Firebase admin SDK
which is a tool provided by Firebase for usage
in JavaScript code, to use the cloud messaging service
and send a new notification to a topic.



And here I'm sending a message to the chat topic of course
on purpose because that's the topic we're subscribing
to in our Flutter apps.
And then as a next step,
the notification that is sent is configured
by giving it a title that's coming from the snapshot data.
So from the document that was added to Firestore.
And here I'm accessing the username.
And this code indeed does look quite similar
to what we did here in our Flutter app
when we output our chat messages.
There we also worked with that snapshot data in the end
and we access the username and the text like this.
We're doing a similar thing here and setting the username
as a title and then the message text as a body.
And username and text are of course keys
that can be found in Firestore.



if you go to your Firestore database
and you take a look at the chat documents
you find username and text, as keys in those documents
and I'm extracting those keys here.
And then this setting here simply controls which
internal activity will be triggered in the app
whenever this notification is tapped.



It in the end will ensure that the app is opened.
So that's the code that will be executed on the backend
in Firebase whenever a new chat document is added.
And therefore now we just have to make sure
that this code gets pushed
to Firebase and gets added to their servers.


And to do that,
you should open the terminal again and run Firebase deploy
and this will now upload this function code
to Firebase and register it there so that
it will be executed whenever we do add a new document
to the chat collection.


now with all of that deployed, if we restart our app,
and we send another message testing cloud functions
this should now be delivered
as a push notification to all subscribed devices.
And as mentioned before, it can take a short while
before the push notification does arrive
because sending them two topics simply takes a bit longer.
But eventually it should get here
because of this cloud function that we set up.


and reload that functions page to get more information
about your function and to, for example
also see the amount of executions here,
the amount of requests received by that function
which in the end tells you how often it has been executed.



Now if you're not getting a push notification
you can also go to your function here
and view the logs to see potential error messages.
And for example, here for me
I got a status 401 error message, which indicates
that we have some kind of permission error
and indeed I got a project not permitted error here,
as it seems.
To get rid of this error,
you should go to your project settings
and under cloud messaging, also enable this cloud
messaging API legacy.
For that, you can follow this link here which I get
after clicking on these three dots and click enable.
With that enabled,
you should now be able to get those push notifications.
So if I test this again and I then close this app,
this push notification now does arrive.
And that's how you can receive push notifications
in Flutter.



